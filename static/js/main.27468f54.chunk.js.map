{"version":3,"sources":["JCLogo3.svg","Logo3J.svg","Logo3C.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","require","aboutText","projectsText","App","className","href","src","myLogo","alt","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,qC,uECA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,8ICO3CC,EAAQ,IAER,IAAMC,EACJ,oXAMIC,EACJ,0NAmGaC,MA/Ff,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,WAChB,yBAAKA,UAAU,2DACb,uBAAGA,UAAU,eAAeC,KAAK,KAC/B,yBAAKC,IAAKC,IAAQC,IAAI,SAASJ,UAAU,gBAE3C,4BACEA,UAAU,iBACVK,KAAK,SACLC,cAAY,WACZC,cAAY,0BACZC,gBAAc,yBACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAMV,UAAU,yBAGlB,yBAAKA,UAAU,2BAA2BW,GAAG,0BAC3C,wBAAIX,UAAU,qCACZ,wBAAIA,UAAU,YACZ,uBAAGC,KAAK,IAAID,UAAU,YAAtB,aAIF,wBAAIA,UAAU,YACZ,uBAAGC,KAAK,IAAID,UAAU,YAAtB,aAIF,wBAAIA,UAAU,YACZ,uBAAGC,KAAK,IAAID,UAAU,YAAtB,cAIF,wBAAIA,UAAU,YACZ,uBAAGC,KAAK,IAAID,UAAU,YAAtB,gBASV,yBAAKA,UAAU,YACb,6BAASA,UAAU,0BACjB,6BACE,6BACE,wBAAIA,UAAU,gBACX,qCAGL,6BACE,wBAAIA,UAAU,gBAAgB,eAEhC,6BACE,6BACE,wBAAIA,UAAU,gBAIX,SAGL,6BACE,wBAAIA,UAAU,gBAIX,cAOX,6BAASA,UAAU,iBACjB,yBAAKW,GAAG,cACN,2BAAId,KAIR,6BAASG,UAAU,oBACjB,yBAAKW,GAAG,iBACN,2BAAIb,QChGIc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.27468f54.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/JCLogo3.9fa8b01d.svg\";","module.exports = __webpack_public_path__ + \"static/media/Logo3J.e29fd805.svg\";","module.exports = __webpack_public_path__ + \"static/media/Logo3C.dbe2a52b.svg\";","import React from \"react\";\nimport myLogo from \"./JCLogo3.svg\";\nimport logoJ from \"./Logo3J.svg\";\nimport logoC from \"./Logo3C.svg\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nrequire(\"bootstrap\");\n\nconst aboutText =\n  \"I'm a MS in Electrical Engineering and MBA passionate about software development, \\\n  data science, computer vision and business analysis. I designed this website using \\\n  node.js, react, bootstrap, css-flexbox, and uploaded it using git. Here you will \\\n  find the projects I've made in different programming languages as well as the \\\n  technologies I used for each of them.\";\n\nconst projectsText =\n  \"These projects are developed in Python, my strongest programming language. I \\\n  started developing in Python in 2016, after starting my Masters in Electrical \\\n  Engineering program in Florida International University.\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <header className=\"bg-dark\">\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light fixed-top\">\n          <a className=\"navbar-brand\" href=\"#\">\n            <img src={myLogo} alt=\"myLogo\" className=\"app-mylogo\" />\n          </a>\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarSupportedContent\"\n            aria-controls=\"navbarSupportedContent\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav mx-auto nav-fill w-100\">\n              <li className=\"nav-item\">\n                <a href=\"#\" className=\"nav-link\">\n                  About Me\n                </a>\n              </li>\n              <li className=\"nav-item\">\n                <a href=\"#\" className=\"nav-link\">\n                  Projects\n                </a>\n              </li>\n              <li className=\"nav-item\">\n                <a href=\"#\" className=\"nav-link\">\n                  Education\n                </a>\n              </li>\n              <li className=\"nav-item\">\n                <a href=\"#\" className=\"nav-link\">\n                  Contact\n                </a>\n              </li>\n            </ul>\n          </div>\n        </nav>\n      </header>\n\n      <div className=\"sections\">\n        <section className=\"intro-section bg-white\">\n          <div>\n            <div>\n              <h4 className=\"welcome-text\">\n                {\"Welcome to my Portfolio Website,\"}\n              </h4>\n            </div>\n            <div>\n              <h4 className=\"welcome-text\">{\"my name is\"}</h4>\n            </div>\n            <div>\n              <div>\n                <h1 className=\"welcome-text\">\n                  {/* <span>\n                    <img src={logoJ} className=\"logo-font\" alt=\"jogoJ\" />\n                  </span> */}\n                  {\"Jose\"}\n                </h1>\n              </div>\n              <div>\n                <h1 className=\"welcome-text\">\n                  {/* <span>\n                    <img src={logoC} className=\"logo-font\" alt=\"jogoC\" />\n                  </span> */}\n                  {\"Cedeno\"}\n                </h1>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        <section className=\"about-section\">\n          <div id=\"about-text\">\n            <p>{aboutText}</p>\n          </div>\n        </section>\n\n        <section className=\"projects-section\">\n          <div id=\"projects-text\">\n            <p>{projectsText}</p>\n          </div>\n        </section>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}